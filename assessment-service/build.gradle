plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'jacoco'
    id 'checkstyle'
}

ext {
    checkstyleVersion = '10.12.2'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestImplementation.extendsFrom(testImplementation)
    integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

dependencies {
    implementation project(':assessment-api')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation files('lib/ojdbc8.jar')

    //Enable Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    //Used for integration tests
    implementation platform('org.testcontainers:testcontainers-bom:1.19.3')
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:oracle-xe'
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Run integration tests"
    group = "verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

jacocoTestReport {
    sourceDirectories.from files('build/generated/sources/annotationProcessor/java/main')

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/AssessmentApplication.class'])
        }))
    }

    dependsOn tasks['test']
}

jacocoTestCoverageVerification {

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/AssessmentApplication.class'])
        }))
    }

    violationRules {
        rule {
            limit {
                minimum = 0.80  // You can define your required coverage ratio here.
            }
        }
    }

    dependsOn tasks['test']
}

checkstyle {
    maxWarnings = 0
    toolVersion = "${checkstyleVersion}"
    sourceSets = [sourceSets.main]
    showViolations = true
}


